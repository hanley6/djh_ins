//
//	Inertial navigation system node
//	David Hanley
//	
//	djh_ins_node.cpp
//	Entry point to the inertial navigation system node.
//
//	Options:
//
//
//	Usage:
//		
//

/*-----------------------------------------------------------------------------*/
/*-------------------------------- Preamble -----------------------------------*/
/*-----------------------------------------------------------------------------*/
/*----------------- Defines --------------------*/
/*--------------- End Defines ------------------*/

/*------------------ Includes ------------------*/
#include <iostream>
#include <stdio.h>
#include <time.h>
#include <Eigen/Core>
// Include the ROS C++ APIs
#include "ros/ros.h"
#include "std_msgs/String.h"
#include "djh_ins/djh_ins.h"
/*---------------- End Includes ----------------*/

/*---------------- Globals ---------------------*/
/*-------------- End Globals -------------------*/

/*------------------ Classes -------------------*/
/*---------------- End Classes -----------------*/

/*----------------- Namespaces -----------------*/
using namespace std;
using namespace Eigen;
/*--------------- End Namespaces ---------------*/

/*------------------ Pragmas -------------------*/

/*---------------- End Pragmas -----------------*/

/*------------- Function Prototypes ------------*/
/*----------- End Function Prototypes ----------*/
/*-----------------------------------------------------------------------------*/
/*------------------------------ End Preamble ---------------------------------*/
/*-----------------------------------------------------------------------------*/

/*-----------------------------------------------------------------------------*/
/*-------------------------------- Helpers ------------------------------------*/
/*-----------------------------------------------------------------------------*/

/*-----------------------------------------------------------------------------*/
/*------------------------------ End Helpers ----------------------------------*/
/*-----------------------------------------------------------------------------*/

/*-----------------------------------------------------------------------------*/
/*----------------------------------- Main ------------------------------------*/
/*-----------------------------------------------------------------------------*/
int main(int argc, char **argv)
{
	// Annouce this program to the ROS master as a "node" called "djh_ins_node"
	ros::init(argc, argv, "djh_ins_node");

	// Start the node resource managers (communication, time, etc)
	ros::start();

    /*---------------------- Testing ----------------------*/
    // Testing INS ODE
    Vector10d state;
    state = MatrixXd::Zero(10,1);
    state(3) = 1.0;

    // Testing INTEGRATOR
    double start_time = 1506369666.0;
    double end_time = 1506369668.0;
    MatrixXd imu(21,7);
    imu << 1506369666.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
           1506369666.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
           1506369666.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
           1506369666.3, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
           1506369666.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
           1506369666.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
           1506369666.6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
           1506369666.7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
           1506369666.8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
           1506369666.9, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
           1506369667.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
           1506369667.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
           1506369667.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
           1506369667.3, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
           1506369667.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
           1506369667.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
           1506369667.6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
           1506369667.7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
           1506369667.8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
           1506369667.9, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
           1506369668.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0;

    // Testing IMU CORRECT
    Vector3d b_a;
    Vector3d b_g;
    b_a(0) = 0.0;
    b_a(1) = 0.0;
    b_a(2) = 0.0;
    b_g(0) = 0.0;
    b_g(1) = 0.0;
    b_g(2) = 0.0;

    // Testing the whole thing!
    djh_ins test(start_time,end_time, imu, state,"RK4",b_a,b_g);
    test.djh_ins_solution(start_time,end_time,imu,state);
    /*-------------------- End Testing --------------------*/

    // Print Test Message
    ROS_INFO("Updated State using Some Integration Method:");
    printf("\n%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\n",test.state(0),test.state(1),test.state(2),test.state(3),test.state(4),test.state(5),test.state(6),test.state(7),test.state(8),test.state(9));

	// Process ROS callbacks until receiving a SIGINT (ctrl-c)
	ros::spin();

	// Stop the node's resources
	ros::shutdown();

	return 0;
}
/*-----------------------------------------------------------------------------*/
/*--------------------------------- End Main ----------------------------------*/
/*-----------------------------------------------------------------------------*/